import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Paginator from '../utils/paginator'

/**
 *  - Pagination : Generates a list of action button to move change the pagination page , the buttons are
 *  generated by calculating the number of buttons using the calculateNumberOfPage method from the Paginotor
 *  class which is only a Division of the NumberOfItems on the itemsPerPage.
 * 
 *  - using Array.apply to convert a number into somthing iterable to be easier to use with JSX
 * 
 * @param {Object} { activePage, itemsPerPage, NumberOfItems, GoToPage, NextPage, PrevuiosPage } 
 */

export default class Pagination extends Component {

    /**
     * go to prev page if the active page number is bigger than 1 
     * 
     * @memberof Pagination
     */
    goToPrev = () => {
        const { activePage, NumberOfPages, prevPage, Key } = this.props;
        if (activePage > 1) {
            prevPage(Key)
        }
    }

    /**
     * go to next page if the active page is smaller than the number of pages
     * 
     * @memberof Pagination
     */
    goToNext = () => {
        const { activePage, NumberOfPages, nextPage, Key } = this.props;
        if (activePage < NumberOfPages) {
            nextPage(Key)
        }
    }

    renderPagintionPages() {
        const { activePage, NumberOfPages, goToPage, Key } = this.props;
        return Array.apply(null, Array(NumberOfPages)).map((item, index) => (
            <li onClick={() => goToPage(index + 1, Key)} key={index} className={`btn btn-default ${index === activePage - 1 && 'active'}`}>{index + 1}</li>
        ))

    }

    render() {
        const { activePage, NumberOfPages } = this.props;
        return (
            <ul style={{ margin: 10 }}>
                <li className={`btn btn-default`} onClick={this.goToPrev} disabled={activePage === 1 ? true : false}>Prev</li>
                {this.renderPagintionPages()}
                <li className={`btn btn-default`} onClick={this.goToNext} disabled={activePage < NumberOfPages ? false : true}>Next</li>
            </ul>
        )
    }
}


Pagination.PropTypes = {
    Key: PropTypes.string,
    goToPage: PropTypes.func,
    nextPage: PropTypes.func,
    prevPage: PropTypes.func,
    activePage: PropTypes.number,
    itemsPerPage: PropTypes.number,
    NumberOfItems: PropTypes.number,
    NumberOfPages: PropTypes.number,
}

